#!/usr/bin/env python

import os
import sys
import argparse
import logging
import inspect
import importlib
import glob

# Find spack's location and its prefix.
current_file = os.path.realpath(os.path.expanduser(__file__))
current_prefix = os.path.dirname(os.path.dirname(current_file))

# Allow spack libs to be imported in our scripts
current_lib_path = os.path.join(current_prefix, "lib")
sys.path.insert(0, current_lib_path)

import utils
import cascade_yaml_config
import log_config
from workspace import WorkspaceManager

ls=log_config.log_setup()
logging.debug("__file__:" + os.path.realpath(__file__))
mylogger = logging.getLogger(__name__)

# create the top-level parser
base_parser = argparse.ArgumentParser(prog='spack-deploy',add_help=False )
base_parser.add_argument('-c','--config_paths', action='append', help='yaml config folders', default = [os.path.join(current_prefix, 'config')])
base_parser.add_argument('-p','--plugin_paths', action='append', help='plugins folders', default = [os.path.join(current_lib_path, 'plugins')])
initial_args = base_parser.parse_known_args()[0]
plugin_folders = vars(initial_args).get('plugin_paths',[])
config_folders = vars(initial_args).get('config_paths',[])
yaml_files = cascade_yaml_config.find_config_file_list(
                list_paths=config_folders,
                default_paths=['config'],
                glob_suffix='defaults.yaml' )

print("@@@@@@@@@@@ find_config_file_list @@@@@@@@@@", yaml_files)
initial_config = cascade_yaml_config.CascadeYamlConfig(yaml_files=yaml_files)
ls.set_args(log_configs=initial_config[['logging_configs']])

available_plugins = cascade_yaml_config.retrieve_plugins(plugin_folders)
default_paths=['config']
for plug_dir in available_plugins:
    default_paths.append(plug_dir)

top_config = cascade_yaml_config.CascadeYamlConfig(
    yaml_files=cascade_yaml_config.find_config_file_list(
        list_paths=config_folders,
        default_paths=default_paths,
        glob_suffix='defaults.yaml' ))

#ls.set_args(log_configs=top_config[['logging_configs']])

common_parser = argparse.ArgumentParser(prog='spack-deploy',
                                        parents=[base_parser],
                                        add_help=False,
                                        formatter_class=argparse.ArgumentDefaultsHelpFormatter  )

#common_args=top_config_dict.get('argparse', dict()).get('common',dict())
common_args=top_config[['argparse', 'common']]

cascade_yaml_config.argparse_add_arguments(common_parser,common_args)
global_args = common_parser.parse_known_args()[0]
print("### global args##",global_args)





parser = argparse.ArgumentParser(prog='spack-deploy',
                                 parents=[common_parser],
                                 formatter_class=argparse.ArgumentDefaultsHelpFormatter)
subparsers = parser.add_subparsers(help='Utility for dealing with many instances of spacks',
                                   dest='subparser_name')
subparsers.required=True

deploy_manager = WorkspaceManager("./workspace", dry_run=global_args.dry_run)
deploy_manager_subcommand = 'workspace'
deploy_manager_conf =top_config[['argparse', 'subparser', deploy_manager_subcommand]]
# print(manager.__class__.__name__ + " :: " + str(manager._get_class_methods_defaults()))
# print("HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH",deploy_manager_conf)
#deploy_manager._add_subparser(subparsers, name='workspace', conf=deploy_manager._get_argparse_methods(deploy_manager_conf), help='A workspace is an instance of spack')
deploy_manager._add_subparser(subparsers, conf=deploy_manager._get_argparse_methods(deploy_manager_conf), help='A workspace is an instance of spack')

args = parser.parse_args()
args.func(args)

