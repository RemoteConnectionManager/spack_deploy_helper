#!/usr/bin/env python

import os
import sys
import argparse
import logging

# Find spack's location and its prefix.
current_file = os.path.realpath(os.path.expanduser(__file__))
current_prefix = os.path.dirname(os.path.dirname(current_file))

# Allow spack libs to be imported in our scripts
current_lib_path = os.path.join(current_prefix, "lib")
sys.path.insert(0, current_lib_path)

import utils
import cascade_yaml_config
from workspace import WorkspaceManager

ls=utils.log_setup()
logging.debug("__file__:" + os.path.realpath(__file__))
ls.set_args()
mylogger = logging.getLogger(__name__)

# create the top-level parser
base_parser = argparse.ArgumentParser(prog='spack-deploy',add_help=False )
base_parser.add_argument('-c','--config_paths', nargs='*', help='yaml config folders', default = [os.path.join(current_prefix, 'config')])
conf = cascade_yaml_config.CascadeYamlConfig(default_paths=['config'], glob_suffix='defaults.yaml' ).conf

common_parser = argparse.ArgumentParser(prog='spack-deploy',
                                        parents=[base_parser],
                                        add_help=False,
                                        formatter_class=argparse.ArgumentDefaultsHelpFormatter  )

common_args=conf.get('argparse', dict()).get('common',dict())

cascade_yaml_config.argparse_add_arguments(common_parser,common_args)
global_args = common_parser.parse_known_args()

parser = argparse.ArgumentParser(prog='spack-deploy',
                                 parents=[common_parser],
                                 formatter_class=argparse.ArgumentDefaultsHelpFormatter)
subparsers = parser.add_subparsers(help='Utility for dealing with many instances of spacks',
                                   dest='subparser_name')
subparsers.required=True

manager = WorkspaceManager("./workspace", dry_run=global_args[0].dry_run)
# print(manager.__class__.__name__ + " :: " + str(manager._get_class_methods_defaults()))
workspace_conf = conf.get('argparse', dict()).get('subparser',dict()).get('workspace',dict())

manager._add_subparser(subparsers, name='workspace', conf=manager._get_argparse_methods(workspace_conf), help='A workspace is an instance of spack')

args = parser.parse_args()
args.func(args)

