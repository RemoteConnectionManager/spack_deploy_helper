#!/usr/bin/env python

import os
import sys
import argparse
import copy
import logging


# set prefix.
current_file = os.path.realpath(os.path.expanduser(__file__))
current_prefix = os.path.dirname(os.path.dirname(current_file))

# Add lib folder in current prefix to default  import path
current_lib_path = os.path.join(current_prefix, "lib")
sys.path.insert(0, current_lib_path)

import utils
import cascade_yaml_config
import log_config

ls=log_config.log_setup()
logging.debug("__file__:" + os.path.realpath(__file__))
mylogger = logging.getLogger(__name__)


# get config folders
base_parser,config_folders, plugin_folders, platform_folders = cascade_yaml_config.setup_from_args_and_configs()
print("%%%%%%%%%% config folders %%%%%%", config_folders)
print("%%%%%%%%%% plugin folders %%%%%%", plugin_folders)
print("%%%%%%%%%% platform folders %%%%%%", platform_folders)

# create the top-level parser
# base_parser = argparse.ArgumentParser(prog='spack-deploy',add_help=False )
# base_parser.add_argument('-c','--config_paths', action='append', help='yaml config folders', default = [os.path.join(current_prefix, 'config')])
# base_parser.add_argument('-p','--plugin_paths', action='append', help='plugins folders', default = [os.path.join(current_lib_path, 'plugins')])
# base_parser.add_argument('-w', '--workdir', action='store', help='workspace folder', default=os.getcwd())
#
# initial_args = base_parser.parse_known_args()[0]
# plugin_folders = vars(initial_args).get('plugin_paths',[])
# config_folders = vars(initial_args).get('config_paths',[])
# yaml_files = cascade_yaml_config.find_config_file_list(
#                 list_paths=config_folders,
#                 default_paths=['config'],
#                 glob_suffix='defaults.yaml' )
#
# # print("@@@@@@@@@@@ find_config_file_list @@@@@@@@@@", yaml_files)
# initial_config = cascade_yaml_config.CascadeYamlConfig(yaml_files=yaml_files)
# ls.set_args(log_configs=initial_config[['logging_configs']])

available_plugins = cascade_yaml_config.retrieve_plugins(plugin_folders)
default_paths=['config']
for plug_dir in available_plugins:
    default_paths.append(plug_dir)

for plat_dir in platform_folders:
    default_paths.append(plat_dir)

# load CascadeYamlConfig with plugin dir added as default
yaml_files=cascade_yaml_config.find_config_file_list(
    list_paths=config_folders,
    default_paths=default_paths,
    glob_suffix='defaults.yaml' )

top_config = cascade_yaml_config.CascadeYamlConfig(
    yaml_files=yaml_files)

#ls.set_args(log_configs=top_config[['logging_configs']])

common_parser = argparse.ArgumentParser(prog='spack-deploy',
                                        parents=[base_parser],
                                        add_help=False,
                                        formatter_class=argparse.ArgumentDefaultsHelpFormatter  )

#common_args=top_config_dict.get('argparse', dict()).get('common',dict())
common_args=top_config[['argparse', 'common']]

cascade_yaml_config.argparse_add_arguments(common_parser,common_args)
global_args = common_parser.parse_known_args()[0]
# print("### global args##",global_args)

# force config and plugin folders to be absolute paths
copy_args = copy.deepcopy(vars(global_args))
copy_args['config_folders'] = config_folders
copy_args['plugin_folders'] = plugin_folders
copy_args['platform_folders'] = platform_folders
copy_args['top_config'] = top_config



parser = argparse.ArgumentParser(prog='spack-deploy',
                                 parents=[common_parser],
                                 formatter_class=argparse.ArgumentDefaultsHelpFormatter)
subparsers = parser.add_subparsers(help='Utility for dealing with many instances of spacks',
                                   dest='subparser_name')
subparsers.required=True

print("adding plugins",available_plugins)
managers = []
for plug_dir in available_plugins:
    for cls in  available_plugins[plug_dir]:
        # print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!11",copy_args)
        manager = cls(**copy_args)
        manager._add_subparser(subparsers)
        # print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!22",copy_args)

        # manager_conf =  top_config[['argparse', 'subparser', cls.__name__]]
        # manager_subcommand = manager_conf.get('command', cls.__name__)
        # methods_conf = manager_conf.get('methods', dict())
        # manager_help = manager_conf.get('help', 'Manager ' + manager_subcommand)
        #
        # # print("adding class:", cls.__name__)
        # # print("%%%%%%%% methods_conf %%%%%%%%%%%%", methods_conf)
        #
        # manager._add_subparser(subparsers, name=manager_subcommand, conf=manager._get_argparse_methods(methods_conf), help=manager_help)
        # managers.append(manager)


# deploy_manager = WorkspaceManager("./workspace", dry_run=global_args.dry_run)
# deploy_manager_subcommand = 'workspace'
# deploy_manager_conf =top_config[['argparse', 'subparser', deploy_manager_subcommand]]
# # print(manager.__class__.__name__ + " :: " + str(manager._get_class_methods_defaults()))
# # print("HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH",deploy_manager_conf)
# #deploy_manager._add_subparser(subparsers, name='workspace', conf=deploy_manager._get_argparse_methods(deploy_manager_conf), help='A workspace is an instance of spack')
# deploy_manager._add_subparser(subparsers, conf=deploy_manager._get_argparse_methods(deploy_manager_conf), help='A workspace is an instance of spack')

args = parser.parse_args()
args.func(args)

