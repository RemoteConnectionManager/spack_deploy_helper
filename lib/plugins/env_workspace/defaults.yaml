defaults:
  upstream :
    url : 'https://github.com/spack/spack.git'
    master : 'develop'

  base_env_dir: "{{DEPLOY_PARENT_ROOTPATH}}/environments"
  merge_config_folders : "{{DEPLOY_MERGE_CONFIG_FOLDERS}}"
  cache : "{{DEPLOY_WORKDIR}}/cache"
  install : '{{DEPLOY_WORKDIR}}/install'
  modules : '{{DEPLOY_WORKDIR}}/modules'
  user_cache : ''
  spack_roots : '{{DEPLOY_WORKDIR}}/spack_roots'
  config_setup:
    spack_commands: 
     - 'spack config get config'
  generate_env:
    spackfile: 'bootstrap_spack.yaml'
    headerfile: "{{DEPLOY_PARENT_ROOTPATH}}/setup.sh"
    pre_commands: 
     - 'spack config get config'




argparse:
  subparser:
    EnvWorkspaceManager:
      command: 'envmanager'
      help: 'manage working environments'
      config:
        spack_yaml_files :
          - 'packages.yaml'
          - 'modules.yaml'
          - 'compilers.yaml'
          - 'config.yaml'
          - 'mirrors.yaml'
          - 'repos.yaml'
      methods:
        list:
          help: 'list available working directories'
          base_env:
            action: 'store'
            default: "{{defaults.base_env_dir}}"
            help: 'Base folder to search work dirs'
        list_spack_roots:
          help: 'list available spack roots'
          spack_roots:
            action: 'store'
            default: "{{defaults.spack_roots}}"
            help: 'Base folder to search spack roots'
        config_setup:
          spack_root:
            action: 'store'
            default: "{{ defaults.git_dest_dir }}"
            help: 'folder where is spack instance (cloned) if start with / considered absolute, otherwise considered relative to workdir'
          clearconfig :
            action: 'store_true'
            default : "{{ defaults.clearconfig }}"
            help: 'clear existing spack configurations'
          runconfig :
            action: 'store_true'
            default : "{{ defaults.runconfig }}"
            help: 'run config.sh files present in config folders'
          out_config_dir :
            action: 'store'
            default: "{{ defaults.output_config_dir }}"
            help: 'folder where generated config files are written, if start with / considered absolute, otherwise considered relative to workdir'
          merge_config_folders :
            action: 'store'
            help: 'List of config folders to merge and substitute into out_config_dir'
            default : '{{ defaults.merge_config_folders }}'
          cache:
            action: 'store'
            default: "{{ defaults.cache }}"
            help: 'folder where cache is, if start with / considered absolute, otherwise considered relative to workdir'
          install:
            action: 'store'
            default: "{{ defaults.install }}"
            help: 'folder where install packages, if start with / considered absolute, otherwise considered relative to workdir'
          modules:
            action: 'store'
            default: "{{ defaults.modules }}"
            help: 'folder where put tcl modules, if start with / considered absolute, otherwise considered relative to dest'
          user_cache:
            action: 'store'
            default: "{{ defaults.user_cache }}"
            help: 'folder where put user cache, if start with / considered absolute, otherwise considered relative to dest'
          spack_commands:
            action: 'store'
            default: "{{ defaults.config_setup.spack_commands }}"
            help: 'spack commands to execute for configuring spack root'

        generate_env:
          spack_root:
            action: 'store'
            default: "{{ defaults.git_dest_dir }}"
            help: 'folder where is spack instance (cloned) if start with / considered absolute, otherwise considered relative to workdir'
          clearconfig :
            action: 'store_true'
            default : "{{ defaults.clearconfig }}"
            help: 'clear existing spack configurations'
          separate_files :
            action: 'store_true'
            default : "{{ defaults.separate_files }}"
            help: 'write separate build files'
          outdir:
            action: 'store'
            default: "{{DEPLOY_GENERATED_DIR}}"
            help: 'folder where put generated files'
          headerfile :
            action: 'store'
            default: "{{ defaults.generate_env.headerfile }}"
            help: 'File to be copied as header at top of build outfile'
          spackfile :
            action: 'store'
            default: "{{ defaults.generate_env.spackfile }}"
            help: 'Envirot filenames inside merge_config_folders to be merged into a template environment spack file'
          merge_config_folders :
            action: 'store'
            help: 'List of config folders to merge and substitute into out_config_dir'
            default : '{{ defaults.merge_config_folders }}'
          user_cache:
            action: 'store'
            default: "{{ defaults.user_cache }}"
            help: 'folder where put user cache, if start with / considered absolute, otherwise considered relative to dest'
          pre_commands:
            action: 'store'
            default: "{{ defaults.generate_env.pre_commands }}"
            help: 'spack commands to execute before build env to configure spack root'
          build_commands:
            action: 'store'
            default: "{{ defaults.generate_env.build_commands }}"
            help: 'spack commands to execute for build env to configure spack root'
          post_commands:
            action: 'store'
            default: "{{ defaults.generate_env.post_commands }}"
            help: 'spack commands to execute after build env to configure spack root'

logging_configs:
  loggers:
    plugin.EnvWorkspaceManager:
      level: INFO
      handlers: [console_bare]
      propagate: False

    plugin.EnvWorkspaceManager.run.input:
      level: INFO
      handlers: [console_colored_in]
      propagate: False
    plugin.EnvWorkspaceManager.run.output:
      level: INFO
      handlers: [console_colored_out]
      propagate: False
    plugin.EnvWorkspaceManager.run.error:
      level: INFO
      handlers: [console_colored_err]
      propagate: False
